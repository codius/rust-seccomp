extern crate libc;
use libc::c_int;
pub static RESTART_SYSCALL: c_int = 0;
pub static EXIT: c_int = 1;
pub static FORK: c_int = 2;
pub static READ: c_int = 3;
pub static WRITE: c_int = 4;
pub static OPEN: c_int = 5;
pub static CLOSE: c_int = 6;
pub static WAITPID: c_int = 7;
pub static CREAT: c_int = 8;
pub static LINK: c_int = 9;
pub static UNLINK: c_int = 10;
pub static EXECVE: c_int = 11;
pub static CHDIR: c_int = 12;
pub static TIME: c_int = 13;
pub static MKNOD: c_int = 14;
pub static CHMOD: c_int = 15;
pub static LCHOWN: c_int = 16;
pub static BREAK: c_int = 17;
pub static OLDSTAT: c_int = 18;
pub static LSEEK: c_int = 19;
pub static GETPID: c_int = 20;
pub static MOUNT: c_int = 21;
pub static UMOUNT: c_int = 22;
pub static SETUID: c_int = 23;
pub static GETUID: c_int = 24;
pub static STIME: c_int = 25;
pub static PTRACE: c_int = 26;
pub static ALARM: c_int = 27;
pub static OLDFSTAT: c_int = 28;
pub static PAUSE: c_int = 29;
pub static UTIME: c_int = 30;
pub static STTY: c_int = 31;
pub static GTTY: c_int = 32;
pub static ACCESS: c_int = 33;
pub static NICE: c_int = 34;
pub static FTIME: c_int = 35;
pub static SYNC: c_int = 36;
pub static KILL: c_int = 37;
pub static RENAME: c_int = 38;
pub static MKDIR: c_int = 39;
pub static RMDIR: c_int = 40;
pub static DUP: c_int = 41;
pub static PIPE: c_int = 42;
pub static TIMES: c_int = 43;
pub static PROF: c_int = 44;
pub static BRK: c_int = 45;
pub static SETGID: c_int = 46;
pub static GETGID: c_int = 47;
pub static SIGNAL: c_int = 48;
pub static GETEUID: c_int = 49;
pub static GETEGID: c_int = 50;
pub static ACCT: c_int = 51;
pub static UMOUNT2: c_int = 52;
pub static LOCK: c_int = 53;
pub static IOCTL: c_int = 54;
pub static FCNTL: c_int = 55;
pub static MPX: c_int = 56;
pub static SETPGID: c_int = 57;
pub static ULIMIT: c_int = 58;
pub static OLDOLDUNAME: c_int = 59;
pub static UMASK: c_int = 60;
pub static CHROOT: c_int = 61;
pub static USTAT: c_int = 62;
pub static DUP2: c_int = 63;
pub static GETPPID: c_int = 64;
pub static GETPGRP: c_int = 65;
pub static SETSID: c_int = 66;
pub static SIGACTION: c_int = 67;
pub static SGETMASK: c_int = 68;
pub static SSETMASK: c_int = 69;
pub static SETREUID: c_int = 70;
pub static SETREGID: c_int = 71;
pub static SIGSUSPEND: c_int = 72;
pub static SIGPENDING: c_int = 73;
pub static SETHOSTNAME: c_int = 74;
pub static SETRLIMIT: c_int = 75;
pub static GETRLIMIT: c_int = 76;
pub static GETRUSAGE: c_int = 77;
pub static GETTIMEOFDAY: c_int = 78;
pub static SETTIMEOFDAY: c_int = 79;
pub static GETGROUPS: c_int = 80;
pub static SETGROUPS: c_int = 81;
pub static SELECT: c_int = 82;
pub static SYMLINK: c_int = 83;
pub static OLDLSTAT: c_int = 84;
pub static READLINK: c_int = 85;
pub static USELIB: c_int = 86;
pub static SWAPON: c_int = 87;
pub static REBOOT: c_int = 88;
pub static READDIR: c_int = 89;
pub static MMAP: c_int = 90;
pub static MUNMAP: c_int = 91;
pub static TRUNCATE: c_int = 92;
pub static FTRUNCATE: c_int = 93;
pub static FCHMOD: c_int = 94;
pub static FCHOWN: c_int = 95;
pub static GETPRIORITY: c_int = 96;
pub static SETPRIORITY: c_int = 97;
pub static PROFIL: c_int = 98;
pub static STATFS: c_int = 99;
pub static FSTATFS: c_int = 100;
pub static IOPERM: c_int = 101;
pub static SOCKETCALL: c_int = 102;
pub static SYSLOG: c_int = 103;
pub static SETITIMER: c_int = 104;
pub static GETITIMER: c_int = 105;
pub static STAT: c_int = 106;
pub static LSTAT: c_int = 107;
pub static FSTAT: c_int = 108;
pub static OLDUNAME: c_int = 109;
pub static IOPL: c_int = 110;
pub static VHANGUP: c_int = 111;
pub static IDLE: c_int = 112;
pub static VM86OLD: c_int = 113;
pub static WAIT4: c_int = 114;
pub static SWAPOFF: c_int = 115;
pub static SYSINFO: c_int = 116;
pub static IPC: c_int = 117;
pub static FSYNC: c_int = 118;
pub static SIGRETURN: c_int = 119;
pub static CLONE: c_int = 120;
pub static SETDOMAINNAME: c_int = 121;
pub static UNAME: c_int = 122;
pub static MODIFY_LDT: c_int = 123;
pub static ADJTIMEX: c_int = 124;
pub static MPROTECT: c_int = 125;
pub static SIGPROCMASK: c_int = 126;
pub static CREATE_MODULE: c_int = 127;
pub static INIT_MODULE: c_int = 128;
pub static DELETE_MODULE: c_int = 129;
pub static GET_KERNEL_SYMS: c_int = 130;
pub static QUOTACTL: c_int = 131;
pub static GETPGID: c_int = 132;
pub static FCHDIR: c_int = 133;
pub static BDFLUSH: c_int = 134;
pub static SYSFS: c_int = 135;
pub static PERSONALITY: c_int = 136;
pub static AFS_SYSCALL: c_int = 137;
pub static SETFSUID: c_int = 138;
pub static SETFSGID: c_int = 139;
pub static _LLSEEK: c_int = 140;
pub static GETDENTS: c_int = 141;
pub static _NEWSELECT: c_int = 142;
pub static FLOCK: c_int = 143;
pub static MSYNC: c_int = 144;
pub static READV: c_int = 145;
pub static WRITEV: c_int = 146;
pub static GETSID: c_int = 147;
pub static FDATASYNC: c_int = 148;
pub static _SYSCTL: c_int = 149;
pub static MLOCK: c_int = 150;
pub static MUNLOCK: c_int = 151;
pub static MLOCKALL: c_int = 152;
pub static MUNLOCKALL: c_int = 153;
pub static SCHED_SETPARAM: c_int = 154;
pub static SCHED_GETPARAM: c_int = 155;
pub static SCHED_SETSCHEDULER: c_int = 156;
pub static SCHED_GETSCHEDULER: c_int = 157;
pub static SCHED_YIELD: c_int = 158;
pub static SCHED_GET_PRIORITY_MAX: c_int = 159;
pub static SCHED_GET_PRIORITY_MIN: c_int = 160;
pub static SCHED_RR_GET_INTERVAL: c_int = 161;
pub static NANOSLEEP: c_int = 162;
pub static MREMAP: c_int = 163;
pub static SETRESUID: c_int = 164;
pub static GETRESUID: c_int = 165;
pub static VM86: c_int = 166;
pub static QUERY_MODULE: c_int = 167;
pub static POLL: c_int = 168;
pub static NFSSERVCTL: c_int = 169;
pub static SETRESGID: c_int = 170;
pub static GETRESGID: c_int = 171;
pub static PRCTL: c_int = 172;
pub static RT_SIGRETURN: c_int = 173;
pub static RT_SIGACTION: c_int = 174;
pub static RT_SIGPROCMASK: c_int = 175;
pub static RT_SIGPENDING: c_int = 176;
pub static RT_SIGTIMEDWAIT: c_int = 177;
pub static RT_SIGQUEUEINFO: c_int = 178;
pub static RT_SIGSUSPEND: c_int = 179;
pub static PREAD64: c_int = 180;
pub static PWRITE64: c_int = 181;
pub static CHOWN: c_int = 182;
pub static GETCWD: c_int = 183;
pub static CAPGET: c_int = 184;
pub static CAPSET: c_int = 185;
pub static SIGALTSTACK: c_int = 186;
pub static SENDFILE: c_int = 187;
pub static GETPMSG: c_int = 188;
pub static PUTPMSG: c_int = 189;
pub static VFORK: c_int = 190;
pub static UGETRLIMIT: c_int = 191;
pub static MMAP2: c_int = 192;
pub static TRUNCATE64: c_int = 193;
pub static FTRUNCATE64: c_int = 194;
pub static STAT64: c_int = 195;
pub static LSTAT64: c_int = 196;
pub static FSTAT64: c_int = 197;
pub static LCHOWN32: c_int = 198;
pub static GETUID32: c_int = 199;
pub static GETGID32: c_int = 200;
pub static GETEUID32: c_int = 201;
pub static GETEGID32: c_int = 202;
pub static SETREUID32: c_int = 203;
pub static SETREGID32: c_int = 204;
pub static GETGROUPS32: c_int = 205;
pub static SETGROUPS32: c_int = 206;
pub static FCHOWN32: c_int = 207;
pub static SETRESUID32: c_int = 208;
pub static GETRESUID32: c_int = 209;
pub static SETRESGID32: c_int = 210;
pub static GETRESGID32: c_int = 211;
pub static CHOWN32: c_int = 212;
pub static SETUID32: c_int = 213;
pub static SETGID32: c_int = 214;
pub static SETFSUID32: c_int = 215;
pub static SETFSGID32: c_int = 216;
pub static PIVOT_ROOT: c_int = 217;
pub static MINCORE: c_int = 218;
pub static MADVISE: c_int = 219;
pub static GETDENTS64: c_int = 220;
pub static FCNTL64: c_int = 221;
pub static GETTID: c_int = 224;
pub static READAHEAD: c_int = 225;
pub static SETXATTR: c_int = 226;
pub static LSETXATTR: c_int = 227;
pub static FSETXATTR: c_int = 228;
pub static GETXATTR: c_int = 229;
pub static LGETXATTR: c_int = 230;
pub static FGETXATTR: c_int = 231;
pub static LISTXATTR: c_int = 232;
pub static LLISTXATTR: c_int = 233;
pub static FLISTXATTR: c_int = 234;
pub static REMOVEXATTR: c_int = 235;
pub static LREMOVEXATTR: c_int = 236;
pub static FREMOVEXATTR: c_int = 237;
pub static TKILL: c_int = 238;
pub static SENDFILE64: c_int = 239;
pub static FUTEX: c_int = 240;
pub static SCHED_SETAFFINITY: c_int = 241;
pub static SCHED_GETAFFINITY: c_int = 242;
pub static SET_THREAD_AREA: c_int = 243;
pub static GET_THREAD_AREA: c_int = 244;
pub static IO_SETUP: c_int = 245;
pub static IO_DESTROY: c_int = 246;
pub static IO_GETEVENTS: c_int = 247;
pub static IO_SUBMIT: c_int = 248;
pub static IO_CANCEL: c_int = 249;
pub static FADVISE64: c_int = 250;
pub static EXIT_GROUP: c_int = 252;
pub static LOOKUP_DCOOKIE: c_int = 253;
pub static EPOLL_CREATE: c_int = 254;
pub static EPOLL_CTL: c_int = 255;
pub static EPOLL_WAIT: c_int = 256;
pub static REMAP_FILE_PAGES: c_int = 257;
pub static SET_TID_ADDRESS: c_int = 258;
pub static TIMER_CREATE: c_int = 259;
pub static TIMER_SETTIME: c_int = 260;
pub static TIMER_GETTIME: c_int = 261;
pub static TIMER_GETOVERRUN: c_int = 262;
pub static TIMER_DELETE: c_int = 263;
pub static CLOCK_SETTIME: c_int = 264;
pub static CLOCK_GETTIME: c_int = 265;
pub static CLOCK_GETRES: c_int = 266;
pub static CLOCK_NANOSLEEP: c_int = 267;
pub static STATFS64: c_int = 268;
pub static FSTATFS64: c_int = 269;
pub static TGKILL: c_int = 270;
pub static UTIMES: c_int = 271;
pub static FADVISE64_64: c_int = 272;
pub static VSERVER: c_int = 273;
pub static MBIND: c_int = 274;
pub static GET_MEMPOLICY: c_int = 275;
pub static SET_MEMPOLICY: c_int = 276;
pub static MQ_OPEN: c_int = 277;
pub static MQ_UNLINK: c_int = 278;
pub static MQ_TIMEDSEND: c_int = 279;
pub static MQ_TIMEDRECEIVE: c_int = 280;
pub static MQ_NOTIFY: c_int = 281;
pub static MQ_GETSETATTR: c_int = 282;
pub static KEXEC_LOAD: c_int = 283;
pub static WAITID: c_int = 284;
pub static ADD_KEY: c_int = 286;
pub static REQUEST_KEY: c_int = 287;
pub static KEYCTL: c_int = 288;
pub static IOPRIO_SET: c_int = 289;
pub static IOPRIO_GET: c_int = 290;
pub static INOTIFY_INIT: c_int = 291;
pub static INOTIFY_ADD_WATCH: c_int = 292;
pub static INOTIFY_RM_WATCH: c_int = 293;
pub static MIGRATE_PAGES: c_int = 294;
pub static OPENAT: c_int = 295;
pub static MKDIRAT: c_int = 296;
pub static MKNODAT: c_int = 297;
pub static FCHOWNAT: c_int = 298;
pub static FUTIMESAT: c_int = 299;
pub static FSTATAT64: c_int = 300;
pub static UNLINKAT: c_int = 301;
pub static RENAMEAT: c_int = 302;
pub static LINKAT: c_int = 303;
pub static SYMLINKAT: c_int = 304;
pub static READLINKAT: c_int = 305;
pub static FCHMODAT: c_int = 306;
pub static FACCESSAT: c_int = 307;
pub static PSELECT6: c_int = 308;
pub static PPOLL: c_int = 309;
pub static UNSHARE: c_int = 310;
pub static SET_ROBUST_LIST: c_int = 311;
pub static GET_ROBUST_LIST: c_int = 312;
pub static SPLICE: c_int = 313;
pub static SYNC_FILE_RANGE: c_int = 314;
pub static TEE: c_int = 315;
pub static VMSPLICE: c_int = 316;
pub static MOVE_PAGES: c_int = 317;
pub static GETCPU: c_int = 318;
pub static EPOLL_PWAIT: c_int = 319;
pub static UTIMENSAT: c_int = 320;
pub static SIGNALFD: c_int = 321;
pub static TIMERFD_CREATE: c_int = 322;
pub static EVENTFD: c_int = 323;
pub static FALLOCATE: c_int = 324;
pub static TIMERFD_SETTIME: c_int = 325;
pub static TIMERFD_GETTIME: c_int = 326;
pub static SIGNALFD4: c_int = 327;
pub static EVENTFD2: c_int = 328;
pub static EPOLL_CREATE1: c_int = 329;
pub static DUP3: c_int = 330;
pub static PIPE2: c_int = 331;
pub static INOTIFY_INIT1: c_int = 332;
pub static PREADV: c_int = 333;
pub static PWRITEV: c_int = 334;
pub static RT_TGSIGQUEUEINFO: c_int = 335;
pub static PERF_EVENT_OPEN: c_int = 336;
pub static RECVMMSG: c_int = 337;
pub static FANOTIFY_INIT: c_int = 338;
pub static FANOTIFY_MARK: c_int = 339;
pub static PRLIMIT64: c_int = 340;
pub static NAME_TO_HANDLE_AT: c_int = 341;
pub static OPEN_BY_HANDLE_AT: c_int = 342;
pub static CLOCK_ADJTIME: c_int = 343;
pub static SYNCFS: c_int = 344;
pub static SENDMMSG: c_int = 345;
pub static SETNS: c_int = 346;
pub static PROCESS_VM_READV: c_int = 347;
pub static PROCESS_VM_WRITEV: c_int = 348;
pub static KCMP: c_int = 349;
pub static FINIT_MODULE: c_int = 350;
pub static SCHED_SETATTR: c_int = 351;
pub static SCHED_GETATTR: c_int = 352;
